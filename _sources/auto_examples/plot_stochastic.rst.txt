.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_stochastic.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_plot_stochastic.py:


==========================
Stochastic examples
==========================

This example is designed to show how to use the stochatic optimization
algorithms for descrete and semicontinous measures from the POT library.


.. code-block:: default


    # Author: Kilian Fatras <kilian.fatras@gmail.com>
    #
    # License: MIT License

    import matplotlib.pylab as pl
    import numpy as np
    import ot
    import ot.plot









COMPUTE TRANSPORTATION MATRIX FOR SEMI-DUAL PROBLEM
############################################################################
############################################################################
 DISCRETE CASE:

 Sample two discrete measures for the discrete case
 ---------------------------------------------

 Define 2 discrete measures a and b, the points where are defined the source
 and the target measures and finally the cost matrix c.


.. code-block:: default


    n_source = 7
    n_target = 4
    reg = 1
    numItermax = 1000

    a = ot.utils.unif(n_source)
    b = ot.utils.unif(n_target)

    rng = np.random.RandomState(0)
    X_source = rng.randn(n_source, 2)
    Y_target = rng.randn(n_target, 2)
    M = ot.dist(X_source, Y_target)








Call the "SAG" method to find the transportation matrix in the discrete case
---------------------------------------------

Define the method "SAG", call ot.solve_semi_dual_entropic and plot the
results.


.. code-block:: default


    method = "SAG"
    sag_pi = ot.stochastic.solve_semi_dual_entropic(a, b, M, reg, method,
                                                    numItermax)
    print(sag_pi)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[2.55553509e-02 9.96395660e-02 1.76579142e-02 4.31178196e-06]
     [1.21640234e-01 1.25357448e-02 1.30225078e-03 7.37891338e-03]
     [3.56123975e-03 7.61451746e-02 6.31505947e-02 1.33831456e-07]
     [2.61515202e-02 3.34246014e-02 8.28734709e-02 4.07550428e-04]
     [9.85500870e-03 7.52288517e-04 1.08262628e-02 1.21423583e-01]
     [2.16904253e-02 9.03825797e-04 1.87178503e-03 1.18391107e-01]
     [4.15462212e-02 2.65987989e-02 7.23177216e-02 2.39440107e-03]]




SEMICONTINOUS CASE:

Sample one general measure a, one discrete measures b for the semicontinous
case
---------------------------------------------

Define one general measure a, one discrete measures b, the points where
are defined the source and the target measures and finally the cost matrix c.


.. code-block:: default


    n_source = 7
    n_target = 4
    reg = 1
    numItermax = 1000
    log = True

    a = ot.utils.unif(n_source)
    b = ot.utils.unif(n_target)

    rng = np.random.RandomState(0)
    X_source = rng.randn(n_source, 2)
    Y_target = rng.randn(n_target, 2)
    M = ot.dist(X_source, Y_target)








Call the "ASGD" method to find the transportation matrix in the semicontinous
case
---------------------------------------------

Define the method "ASGD", call ot.solve_semi_dual_entropic and plot the
results.


.. code-block:: default


    method = "ASGD"
    asgd_pi, log_asgd = ot.stochastic.solve_semi_dual_entropic(a, b, M, reg, method,
                                                               numItermax, log=log)
    print(log_asgd['alpha'], log_asgd['beta'])
    print(asgd_pi)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [4.01715645 7.66603441 4.05747339 2.78165555 1.18089798 3.01477839
     2.88045001] [-2.53694436 -2.56741273 -1.05738222  6.1617393 ]
    [[2.73425360e-02 9.81014452e-02 1.74060544e-02 7.10718394e-06]
     [1.19231382e-01 1.13070707e-02 1.17601253e-03 1.11426775e-02]
     [3.85965324e-03 7.59409622e-02 6.30563039e-02 2.23454497e-07]
     [2.79032294e-02 3.28178707e-02 8.14661231e-02 6.69919629e-04]
     [6.78210992e-03 4.76407816e-04 6.86420694e-03 1.28734418e-01]
     [1.49955045e-02 5.74995410e-04 1.19221058e-03 1.26094432e-01]
     [4.35327293e-02 2.56467906e-02 6.98124842e-02 3.86513871e-03]]




Compare the results with the Sinkhorn algorithm
---------------------------------------------

Call the Sinkhorn algorithm from POT


.. code-block:: default


    sinkhorn_pi = ot.sinkhorn(a, b, M, reg)
    print(sinkhorn_pi)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[2.55553508e-02 9.96395661e-02 1.76579142e-02 4.31178193e-06]
     [1.21640234e-01 1.25357448e-02 1.30225079e-03 7.37891333e-03]
     [3.56123974e-03 7.61451746e-02 6.31505947e-02 1.33831455e-07]
     [2.61515201e-02 3.34246014e-02 8.28734709e-02 4.07550425e-04]
     [9.85500876e-03 7.52288523e-04 1.08262629e-02 1.21423583e-01]
     [2.16904255e-02 9.03825804e-04 1.87178504e-03 1.18391107e-01]
     [4.15462212e-02 2.65987989e-02 7.23177217e-02 2.39440105e-03]]




PLOT TRANSPORTATION MATRIX
#############################################################################

Plot SAG results
----------------


.. code-block:: default


    pl.figure(4, figsize=(5, 5))
    ot.plot.plot1D_mat(a, b, sag_pi, 'semi-dual : OT matrix SAG')
    pl.show()





.. image:: /auto_examples/images/sphx_glr_plot_stochastic_001.png
    :alt: semi-dual : OT matrix SAG
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/project/examples/plot_stochastic.py:119: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
      pl.show()




Plot ASGD results
-----------------


.. code-block:: default


    pl.figure(4, figsize=(5, 5))
    ot.plot.plot1D_mat(a, b, asgd_pi, 'semi-dual : OT matrix ASGD')
    pl.show()





.. image:: /auto_examples/images/sphx_glr_plot_stochastic_002.png
    :alt: semi-dual : OT matrix ASGD
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/project/examples/plot_stochastic.py:128: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
      pl.show()




Plot Sinkhorn results
---------------------


.. code-block:: default


    pl.figure(4, figsize=(5, 5))
    ot.plot.plot1D_mat(a, b, sinkhorn_pi, 'OT matrix Sinkhorn')
    pl.show()





.. image:: /auto_examples/images/sphx_glr_plot_stochastic_003.png
    :alt: OT matrix Sinkhorn
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/project/examples/plot_stochastic.py:137: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
      pl.show()




COMPUTE TRANSPORTATION MATRIX FOR DUAL PROBLEM
############################################################################
############################################################################
 SEMICONTINOUS CASE:

 Sample one general measure a, one discrete measures b for the semicontinous
 case
 ---------------------------------------------

 Define one general measure a, one discrete measures b, the points where
 are defined the source and the target measures and finally the cost matrix c.


.. code-block:: default


    n_source = 7
    n_target = 4
    reg = 1
    numItermax = 100000
    lr = 0.1
    batch_size = 3
    log = True

    a = ot.utils.unif(n_source)
    b = ot.utils.unif(n_target)

    rng = np.random.RandomState(0)
    X_source = rng.randn(n_source, 2)
    Y_target = rng.randn(n_target, 2)
    M = ot.dist(X_source, Y_target)








Call the "SGD" dual method to find the transportation matrix in the
semicontinous case
---------------------------------------------

Call ot.solve_dual_entropic and plot the results.


.. code-block:: default


    sgd_dual_pi, log_sgd = ot.stochastic.solve_dual_entropic(a, b, M, reg,
                                                             batch_size, numItermax,
                                                             lr, log=log)
    print(log_sgd['alpha'], log_sgd['beta'])
    print(sgd_dual_pi)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [0.91973341 2.76549149 1.07722379 0.02564332 0.61203371 1.81600076
     0.11874234] [0.33762203 0.47448553 1.56885959 4.95390167]
    [[2.18803054e-02 9.28028471e-02 1.08659806e-02 9.59282679e-08]
     [1.57224474e-02 1.76258872e-03 1.20974970e-04 2.47829840e-05]
     [3.47256716e-03 8.07699417e-02 4.42572963e-02 3.39098544e-09]
     [3.14153489e-02 4.36786417e-02 7.15514548e-02 1.27216833e-05]
     [6.80328297e-02 5.64942043e-03 5.37153093e-02 2.17812523e-02]
     [8.01210979e-02 3.63179642e-03 4.96927217e-03 1.13636064e-02]
     [4.87337485e-02 3.39405015e-02 6.09678691e-02 7.29816143e-05]]




Compare the results with the Sinkhorn algorithm
---------------------------------------------

Call the Sinkhorn algorithm from POT


.. code-block:: default


    sinkhorn_pi = ot.sinkhorn(a, b, M, reg)
    print(sinkhorn_pi)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[2.55553508e-02 9.96395661e-02 1.76579142e-02 4.31178193e-06]
     [1.21640234e-01 1.25357448e-02 1.30225079e-03 7.37891333e-03]
     [3.56123974e-03 7.61451746e-02 6.31505947e-02 1.33831455e-07]
     [2.61515201e-02 3.34246014e-02 8.28734709e-02 4.07550425e-04]
     [9.85500876e-03 7.52288523e-04 1.08262629e-02 1.21423583e-01]
     [2.16904255e-02 9.03825804e-04 1.87178504e-03 1.18391107e-01]
     [4.15462212e-02 2.65987989e-02 7.23177217e-02 2.39440105e-03]]




Plot  SGD results
-----------------


.. code-block:: default


    pl.figure(4, figsize=(5, 5))
    ot.plot.plot1D_mat(a, b, sgd_dual_pi, 'dual : OT matrix SGD')
    pl.show()





.. image:: /auto_examples/images/sphx_glr_plot_stochastic_004.png
    :alt: dual : OT matrix SGD
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/project/examples/plot_stochastic.py:199: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
      pl.show()




Plot Sinkhorn results
---------------------


.. code-block:: default


    pl.figure(4, figsize=(5, 5))
    ot.plot.plot1D_mat(a, b, sinkhorn_pi, 'OT matrix Sinkhorn')
    pl.show()



.. image:: /auto_examples/images/sphx_glr_plot_stochastic_005.png
    :alt: OT matrix Sinkhorn
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/project/examples/plot_stochastic.py:208: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
      pl.show()





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  11.889 seconds)


.. _sphx_glr_download_auto_examples_plot_stochastic.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_stochastic.py <plot_stochastic.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_stochastic.ipynb <plot_stochastic.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
