.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_others_plot_WDA.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_others_plot_WDA.py:


=================================
Wasserstein Discriminant Analysis
=================================

This example illustrate the use of WDA as proposed in [11].


[11] Flamary, R., Cuturi, M., Courty, N., & Rakotomamonjy, A. (2016).
Wasserstein Discriminant Analysis.


.. code-block:: default


    # Author: Remi Flamary <remi.flamary@unice.fr>
    #
    # License: MIT License

    # sphinx_gallery_thumbnail_number = 2

    import numpy as np
    import matplotlib.pylab as pl

    from ot.dr import wda, fda









Generate data
-------------


.. code-block:: default


    n = 1000  # nb samples in source and target datasets
    nz = 0.2

    # generate circle dataset
    t = np.random.rand(n) * 2 * np.pi
    ys = np.floor((np.arange(n) * 1.0 / n * 3)) + 1
    xs = np.concatenate(
        (np.cos(t).reshape((-1, 1)), np.sin(t).reshape((-1, 1))), 1)
    xs = xs * ys.reshape(-1, 1) + nz * np.random.randn(n, 2)

    t = np.random.rand(n) * 2 * np.pi
    yt = np.floor((np.arange(n) * 1.0 / n * 3)) + 1
    xt = np.concatenate(
        (np.cos(t).reshape((-1, 1)), np.sin(t).reshape((-1, 1))), 1)
    xt = xt * yt.reshape(-1, 1) + nz * np.random.randn(n, 2)

    nbnoise = 8

    xs = np.hstack((xs, np.random.randn(n, nbnoise)))
    xt = np.hstack((xt, np.random.randn(n, nbnoise)))








Plot data
---------


.. code-block:: default

    pl.figure(1, figsize=(6.4, 3.5))

    pl.subplot(1, 2, 1)
    pl.scatter(xt[:, 0], xt[:, 1], c=ys, marker='+', label='Source samples')
    pl.legend(loc=0)
    pl.title('Discriminant dimensions')

    pl.subplot(1, 2, 2)
    pl.scatter(xt[:, 2], xt[:, 3], c=ys, marker='+', label='Source samples')
    pl.legend(loc=0)
    pl.title('Other dimensions')
    pl.tight_layout()




.. image:: /auto_examples/others/images/sphx_glr_plot_WDA_001.png
    :alt: Discriminant dimensions, Other dimensions
    :class: sphx-glr-single-img





Compute Fisher Discriminant Analysis
------------------------------------


.. code-block:: default

    p = 2

    Pfda, projfda = fda(xs, ys, p)








Compute Wasserstein Discriminant Analysis
-----------------------------------------


.. code-block:: default

    p = 2
    reg = 1e0
    k = 10
    maxiter = 100

    Pwda, projwda = wda(xs, ys, p, reg, k, maxiter=maxiter)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Compiling cost function...
    Computing gradient of cost function...
     iter              cost val         grad. norm
        1   +8.5228903088004582e-01 4.43603865e-01
        2   +4.7365470391834213e-01 2.66413056e-01
        3   +4.5128618916062591e-01 2.12790473e-01
        4   +4.2969404765008778e-01 1.15450130e-01
        5   +4.2155051489077183e-01 5.13490250e-02
        6   +4.2001467189112462e-01 7.05177735e-02
        7   +4.1675310410552285e-01 2.50043224e-02
        8   +4.1370218724197616e-01 4.72843808e-02
        9   +4.1248044660142702e-01 1.50212799e-02
       10   +4.1237960897551229e-01 2.00357590e-02
       11   +4.1214004645829544e-01 7.73727125e-03
       12   +4.1154406765443113e-01 1.80883792e-02
       13   +4.1133438612585105e-01 1.30543917e-02
       14   +4.1124194843257655e-01 1.54907383e-02
       15   +4.1108443955166529e-01 9.39401088e-03
       16   +4.1100485619449278e-01 1.65212168e-02
       17   +4.1083055658793194e-01 7.36047420e-03
       18   +4.1043349961540626e-01 2.21679240e-02
       19   +4.1020739958500413e-01 1.45258721e-02
       20   +4.1012274861843168e-01 1.61625017e-02
       21   +4.0996043354301587e-01 8.42846220e-03
       22   +4.0984107217385940e-01 1.74441748e-02
       23   +4.0967919319333296e-01 1.18343570e-02
       24   +4.0959672793565555e-01 1.46356794e-02
       25   +4.0946228020127817e-01 1.02487857e-02
       26   +4.0936734289397853e-01 1.37817570e-02
       27   +4.0926261816064358e-01 1.42294195e-02
       28   +4.0916169375014144e-01 1.54373139e-02
       29   +4.0901955872842471e-01 1.24693657e-02
       30   +4.0889564583987997e-01 1.15772952e-02
       31   +4.0888895652205720e-01 2.47378468e-02
       32   +4.0886272871741119e-01 2.37614359e-02
       33   +4.0876654575316046e-01 1.98635866e-02
       34   +4.0853945633086763e-01 8.39436739e-03
       35   +4.0761426561889735e-01 9.03275941e-03
       36   +4.0674013616588389e-01 3.05338917e-02
       37   +4.0626983945895884e-01 2.27016215e-02
       38   +4.0599021388645606e-01 1.82429652e-02
       39   +4.0575928126660471e-01 1.42358086e-02
       40   +4.0556823798289676e-01 1.66370823e-02
       41   +4.0548141768268242e-01 2.58045021e-02
       42   +4.0521239839425227e-01 1.49698449e-02
       43   +4.0504643985864941e-01 1.86723911e-02
       44   +4.0486784343793997e-01 1.75465165e-02
       45   +4.0479530073145320e-01 2.22640802e-02
       46   +4.0458166561429360e-01 1.13310325e-02
       47   +4.0456768065305410e-01 2.10435879e-02
       48   +4.0451504970721380e-01 1.85680517e-02
       49   +4.0436338143592615e-01 8.88305144e-03
       50   +4.0429698713217288e-01 8.32364398e-03
       51   +4.0424396198855295e-01 7.84056213e-03
       52   +4.0419842500473424e-01 6.52643646e-03
       53   +4.0416390156865534e-01 7.05440590e-03
       54   +4.0416168488217147e-01 1.14180265e-02
       55   +4.0415309863969862e-01 1.06982319e-02
       56   +4.0412347644864116e-01 7.82516644e-03
       57   +4.0409877469291561e-01 7.75129231e-03
       58   +4.0406755879194500e-01 5.90619392e-03
       59   +4.0404458604510923e-01 5.27702930e-03
       60   +4.0402303002792833e-01 4.34460322e-03
       61   +4.0400353652006593e-01 5.08783093e-03
       62   +4.0400184740641470e-01 9.05592774e-03
       63   +4.0399534762253858e-01 8.37139467e-03
       64   +4.0397370242356967e-01 5.67137853e-03
       65   +4.0395212907417655e-01 3.54254335e-03
       66   +4.0393175099947953e-01 5.68290030e-03
       67   +4.0392983845581221e-01 8.41961996e-03
       68   +4.0392256947945859e-01 7.58617623e-03
       69   +4.0390008827237223e-01 4.35924229e-03
       70   +4.0388806643702635e-01 5.59079551e-03
       71   +4.0386953798702940e-01 3.95522078e-03
       72   +4.0385784229702015e-01 5.00227202e-03
       73   +4.0384471913987557e-01 4.76436021e-03
       74   +4.0383817731652449e-01 6.19258247e-03
       75   +4.0381989854176453e-01 2.91362995e-03
       76   +4.0381040587839817e-01 6.17957096e-03
       77   +4.0378944777712611e-01 2.25425702e-03
       78   +4.0371783518145454e-01 3.89586207e-03
       79   +4.0371083423098225e-01 5.21934848e-03
       80   +4.0369442443181303e-01 2.54972563e-03
       81   +4.0362022890396998e-01 4.75861121e-03
       82   +4.0359267570334828e-01 8.36740498e-03
       83   +4.0354770294676878e-01 6.44292672e-03
       84   +4.0350530943121315e-01 7.52184073e-03
       85   +4.0347790751857465e-01 1.29993997e-02
       86   +4.0339820784975061e-01 6.83417515e-03
       87   +4.0332516824676545e-01 1.14509003e-02
       88   +4.0327576773323820e-01 1.40044533e-02
       89   +4.0316143487163070e-01 6.07125330e-03
       90   +4.0278751549673603e-01 7.14017835e-03
       91   +4.0275232628035679e-01 6.38532802e-03
       92   +4.0272149330141249e-01 5.31547894e-03
       93   +4.0269708727296355e-01 5.80089642e-03
       94   +4.0267275907627348e-01 3.89894628e-03
       95   +4.0265314703656691e-01 5.83697080e-03
       96   +4.0264706598041977e-01 7.36870893e-03
       97   +4.0262768927255704e-01 4.49052885e-03
       98   +4.0261608888798667e-01 4.25227835e-03
       99   +4.0261411656024126e-01 6.16234634e-03
      100   +4.0260697838458065e-01 5.00366007e-03
    Terminated - max iterations reached after 15.54 seconds.





Plot 2D projections
-------------------


.. code-block:: default


    xsp = projfda(xs)
    xtp = projfda(xt)

    xspw = projwda(xs)
    xtpw = projwda(xt)

    pl.figure(2)

    pl.subplot(2, 2, 1)
    pl.scatter(xsp[:, 0], xsp[:, 1], c=ys, marker='+', label='Projected samples')
    pl.legend(loc=0)
    pl.title('Projected training samples FDA')

    pl.subplot(2, 2, 2)
    pl.scatter(xtp[:, 0], xtp[:, 1], c=ys, marker='+', label='Projected samples')
    pl.legend(loc=0)
    pl.title('Projected test samples FDA')

    pl.subplot(2, 2, 3)
    pl.scatter(xspw[:, 0], xspw[:, 1], c=ys, marker='+', label='Projected samples')
    pl.legend(loc=0)
    pl.title('Projected training samples WDA')

    pl.subplot(2, 2, 4)
    pl.scatter(xtpw[:, 0], xtpw[:, 1], c=ys, marker='+', label='Projected samples')
    pl.legend(loc=0)
    pl.title('Projected test samples WDA')
    pl.tight_layout()

    pl.show()



.. image:: /auto_examples/others/images/sphx_glr_plot_WDA_002.png
    :alt: Projected training samples FDA, Projected test samples FDA, Projected training samples WDA, Projected test samples WDA
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/project/examples/others/plot_WDA.py:129: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
      pl.show()





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  16.065 seconds)


.. _sphx_glr_download_auto_examples_others_plot_WDA.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_WDA.py <plot_WDA.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_WDA.ipynb <plot_WDA.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
