.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_WDA.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_plot_WDA.py:


=================================
Wasserstein Discriminant Analysis
=================================

This example illustrate the use of WDA as proposed in [11].


[11] Flamary, R., Cuturi, M., Courty, N., & Rakotomamonjy, A. (2016).
Wasserstein Discriminant Analysis.


.. code-block:: default


    # Author: Remi Flamary <remi.flamary@unice.fr>
    #
    # License: MIT License

    import numpy as np
    import matplotlib.pylab as pl

    from ot.dr import wda, fda









Generate data
-------------


.. code-block:: default


    n = 1000  # nb samples in source and target datasets
    nz = 0.2

    # generate circle dataset
    t = np.random.rand(n) * 2 * np.pi
    ys = np.floor((np.arange(n) * 1.0 / n * 3)) + 1
    xs = np.concatenate(
        (np.cos(t).reshape((-1, 1)), np.sin(t).reshape((-1, 1))), 1)
    xs = xs * ys.reshape(-1, 1) + nz * np.random.randn(n, 2)

    t = np.random.rand(n) * 2 * np.pi
    yt = np.floor((np.arange(n) * 1.0 / n * 3)) + 1
    xt = np.concatenate(
        (np.cos(t).reshape((-1, 1)), np.sin(t).reshape((-1, 1))), 1)
    xt = xt * yt.reshape(-1, 1) + nz * np.random.randn(n, 2)

    nbnoise = 8

    xs = np.hstack((xs, np.random.randn(n, nbnoise)))
    xt = np.hstack((xt, np.random.randn(n, nbnoise)))








Plot data
---------


.. code-block:: default

    pl.figure(1, figsize=(6.4, 3.5))

    pl.subplot(1, 2, 1)
    pl.scatter(xt[:, 0], xt[:, 1], c=ys, marker='+', label='Source samples')
    pl.legend(loc=0)
    pl.title('Discriminant dimensions')

    pl.subplot(1, 2, 2)
    pl.scatter(xt[:, 2], xt[:, 3], c=ys, marker='+', label='Source samples')
    pl.legend(loc=0)
    pl.title('Other dimensions')
    pl.tight_layout()




.. image:: /auto_examples/images/sphx_glr_plot_WDA_001.png
    :class: sphx-glr-single-img





Compute Fisher Discriminant Analysis
------------------------------------


.. code-block:: default

    p = 2

    Pfda, projfda = fda(xs, ys, p)








Compute Wasserstein Discriminant Analysis
-----------------------------------------


.. code-block:: default

    p = 2
    reg = 1e0
    k = 10
    maxiter = 100

    Pwda, projwda = wda(xs, ys, p, reg, k, maxiter=maxiter)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Compiling cost function...
    Computing gradient of cost function...
     iter              cost val         grad. norm
        1   +9.0511439167625762e-01 2.81424337e-01
        2   +5.0718302263810666e-01 3.76403263e-01
        3   +4.7320199587655626e-01 2.81469564e-01
        4   +4.2339210314941517e-01 8.40718390e-02
        5   +4.2004936425034439e-01 5.10982297e-02
        6   +4.1972995619816073e-01 6.59763807e-02
        7   +4.1859923500281204e-01 5.12110913e-02
        8   +4.1677225293973608e-01 3.86597359e-02
        9   +4.1560011566389554e-01 1.06328973e-01
       10   +4.1147276632891611e-01 8.46392074e-02
       11   +3.9874222545365423e-01 1.24919858e-01
       12   +3.4129800247861369e-01 2.09036109e-01
       13   +2.4949181381108290e-01 1.46004857e-01
       14   +2.2926801067512045e-01 3.61810048e-02
       15   +2.2843805099818557e-01 1.29231882e-02
       16   +2.2839236673536981e-01 1.00806580e-02
       17   +2.2832744686738818e-01 2.94382083e-03
       18   +2.2832218676962282e-01 1.03727033e-03
       19   +2.2832188036511861e-01 7.96037750e-04
       20   +2.2832151226067721e-01 3.18051182e-04
       21   +2.2832144941992458e-01 1.00936895e-04
       22   +2.2832144248322991e-01 1.18243032e-05
       23   +2.2832144238825394e-01 1.46381196e-06
       24   +2.2832144238677604e-01 7.30006677e-09
    Terminated - min grad norm reached after 24 iterations, 3.98 seconds.





Plot 2D projections
-------------------


.. code-block:: default


    xsp = projfda(xs)
    xtp = projfda(xt)

    xspw = projwda(xs)
    xtpw = projwda(xt)

    pl.figure(2)

    pl.subplot(2, 2, 1)
    pl.scatter(xsp[:, 0], xsp[:, 1], c=ys, marker='+', label='Projected samples')
    pl.legend(loc=0)
    pl.title('Projected training samples FDA')

    pl.subplot(2, 2, 2)
    pl.scatter(xtp[:, 0], xtp[:, 1], c=ys, marker='+', label='Projected samples')
    pl.legend(loc=0)
    pl.title('Projected test samples FDA')

    pl.subplot(2, 2, 3)
    pl.scatter(xspw[:, 0], xspw[:, 1], c=ys, marker='+', label='Projected samples')
    pl.legend(loc=0)
    pl.title('Projected training samples WDA')

    pl.subplot(2, 2, 4)
    pl.scatter(xtpw[:, 0], xtpw[:, 1], c=ys, marker='+', label='Projected samples')
    pl.legend(loc=0)
    pl.title('Projected test samples WDA')
    pl.tight_layout()

    pl.show()



.. image:: /auto_examples/images/sphx_glr_plot_WDA_002.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/project/examples/plot_WDA.py:127: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
      pl.show()





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.427 seconds)


.. _sphx_glr_download_auto_examples_plot_WDA.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_WDA.py <plot_WDA.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_WDA.ipynb <plot_WDA.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
