.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_stochastic.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_plot_stochastic.py:


===================
Stochastic examples
===================

This example is designed to show how to use the stochatic optimization
algorithms for discrete and semi-continuous measures from the POT library.

[18] Genevay, A., Cuturi, M., Peyr√©, G. & Bach, F.
Stochastic Optimization for Large-scale Optimal Transport.
Advances in Neural Information Processing Systems (2016).

[19] Seguy, V., Bhushan Damodaran, B., Flamary, R., Courty, N., Rolet, A. &
Blondel, M. Large-scale Optimal Transport and Mapping Estimation.
International Conference on Learning Representation (2018)


.. code-block:: default


    # Author: Kilian Fatras <kilian.fatras@gmail.com>
    #
    # License: MIT License

    import matplotlib.pylab as pl
    import numpy as np
    import ot
    import ot.plot









Compute the Transportation Matrix for the Semi-Dual Problem
-----------------------------------------------------------

Discrete case
`````````````

Sample two discrete measures for the discrete case and compute their cost
matrix c.


.. code-block:: default


    n_source = 7
    n_target = 4
    reg = 1
    numItermax = 1000

    a = ot.utils.unif(n_source)
    b = ot.utils.unif(n_target)

    rng = np.random.RandomState(0)
    X_source = rng.randn(n_source, 2)
    Y_target = rng.randn(n_target, 2)
    M = ot.dist(X_source, Y_target)








Call the "SAG" method to find the transportation matrix in the discrete case


.. code-block:: default


    method = "SAG"
    sag_pi = ot.stochastic.solve_semi_dual_entropic(a, b, M, reg, method,
                                                    numItermax)
    print(sag_pi)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[2.55553509e-02 9.96395660e-02 1.76579142e-02 4.31178196e-06]
     [1.21640234e-01 1.25357448e-02 1.30225078e-03 7.37891338e-03]
     [3.56123975e-03 7.61451746e-02 6.31505947e-02 1.33831456e-07]
     [2.61515202e-02 3.34246014e-02 8.28734709e-02 4.07550428e-04]
     [9.85500870e-03 7.52288517e-04 1.08262628e-02 1.21423583e-01]
     [2.16904253e-02 9.03825797e-04 1.87178503e-03 1.18391107e-01]
     [4.15462212e-02 2.65987989e-02 7.23177216e-02 2.39440107e-03]]




Semi-Continuous Case
````````````````````

Sample one general measure a, one discrete measures b for the semicontinous
case, the points where source and target measures are defined and compute the
cost matrix.


.. code-block:: default


    n_source = 7
    n_target = 4
    reg = 1
    numItermax = 1000
    log = True

    a = ot.utils.unif(n_source)
    b = ot.utils.unif(n_target)

    rng = np.random.RandomState(0)
    X_source = rng.randn(n_source, 2)
    Y_target = rng.randn(n_target, 2)
    M = ot.dist(X_source, Y_target)








Call the "ASGD" method to find the transportation matrix in the semicontinous
case.


.. code-block:: default


    method = "ASGD"
    asgd_pi, log_asgd = ot.stochastic.solve_semi_dual_entropic(a, b, M, reg, method,
                                                               numItermax, log=log)
    print(log_asgd['alpha'], log_asgd['beta'])
    print(asgd_pi)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [3.772432   7.63086117 3.79449693 2.5685319  1.65782431 3.4907055
     2.70297835] [-2.4893433  -2.27239412 -0.82213913  5.58387655]
    [[2.24506643e-02 1.03161555e-01 1.72418013e-02 3.12214071e-06]
     [1.20722415e-01 1.46622126e-02 1.43648528e-03 6.03603031e-03]
     [3.11180190e-03 7.84136775e-02 6.13315671e-02 9.63867344e-08]
     [2.36466118e-02 3.56186065e-02 8.32881848e-02 3.03739776e-04]
     [1.14594606e-02 1.03093267e-03 1.39920586e-02 1.16374691e-01]
     [2.53120008e-02 1.24303067e-03 2.42778521e-03 1.13874326e-01]
     [3.82308375e-02 2.88458283e-02 7.39644282e-02 1.81604880e-03]]




Compare the results with the Sinkhorn algorithm


.. code-block:: default


    sinkhorn_pi = ot.sinkhorn(a, b, M, reg)
    print(sinkhorn_pi)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[2.55553508e-02 9.96395661e-02 1.76579142e-02 4.31178193e-06]
     [1.21640234e-01 1.25357448e-02 1.30225079e-03 7.37891333e-03]
     [3.56123974e-03 7.61451746e-02 6.31505947e-02 1.33831455e-07]
     [2.61515201e-02 3.34246014e-02 8.28734709e-02 4.07550425e-04]
     [9.85500876e-03 7.52288523e-04 1.08262629e-02 1.21423583e-01]
     [2.16904255e-02 9.03825804e-04 1.87178504e-03 1.18391107e-01]
     [4.15462212e-02 2.65987989e-02 7.23177217e-02 2.39440105e-03]]




Plot Transportation Matrices
````````````````````````````

For SAG


.. code-block:: default


    pl.figure(4, figsize=(5, 5))
    ot.plot.plot1D_mat(a, b, sag_pi, 'semi-dual : OT matrix SAG')
    pl.show()





.. image:: /auto_examples/images/sphx_glr_plot_stochastic_001.png
    :alt: semi-dual : OT matrix SAG
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/project/examples/plot_stochastic.py:107: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
      pl.show()




For ASGD


.. code-block:: default


    pl.figure(4, figsize=(5, 5))
    ot.plot.plot1D_mat(a, b, asgd_pi, 'semi-dual : OT matrix ASGD')
    pl.show()





.. image:: /auto_examples/images/sphx_glr_plot_stochastic_002.png
    :alt: semi-dual : OT matrix ASGD
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/project/examples/plot_stochastic.py:115: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
      pl.show()




For Sinkhorn


.. code-block:: default


    pl.figure(4, figsize=(5, 5))
    ot.plot.plot1D_mat(a, b, sinkhorn_pi, 'OT matrix Sinkhorn')
    pl.show()





.. image:: /auto_examples/images/sphx_glr_plot_stochastic_003.png
    :alt: OT matrix Sinkhorn
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/project/examples/plot_stochastic.py:123: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
      pl.show()




Compute the Transportation Matrix for the Dual Problem
------------------------------------------------------

Semi-continuous case
````````````````````

Sample one general measure a, one discrete measures b for the semi-continuous
case and compute the cost matrix c.


.. code-block:: default


    n_source = 7
    n_target = 4
    reg = 1
    numItermax = 100000
    lr = 0.1
    batch_size = 3
    log = True

    a = ot.utils.unif(n_source)
    b = ot.utils.unif(n_target)

    rng = np.random.RandomState(0)
    X_source = rng.randn(n_source, 2)
    Y_target = rng.randn(n_target, 2)
    M = ot.dist(X_source, Y_target)








Call the "SGD" dual method to find the transportation matrix in the
semi-continuous case


.. code-block:: default


    sgd_dual_pi, log_sgd = ot.stochastic.solve_dual_entropic(a, b, M, reg,
                                                             batch_size, numItermax,
                                                             lr, log=log)
    print(log_sgd['alpha'], log_sgd['beta'])
    print(sgd_dual_pi)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [0.91611925 2.77300255 1.07050162 0.02041663 0.61192902 1.82567193
     0.11334983] [0.33924133 0.47742562 1.57248677 4.94183712]
    [[2.18367009e-02 9.27403129e-02 1.08661222e-02 9.44359662e-08]
     [1.58666565e-02 1.78110640e-03 1.22329952e-04 2.46703916e-05]
     [3.45489225e-03 8.04650404e-02 4.41205326e-02 3.32787464e-09]
     [3.13022256e-02 4.35788801e-02 7.14370994e-02 1.25036005e-05]
     [6.81359507e-02 5.66546149e-03 5.39048547e-02 2.15177972e-02]
     [8.10308281e-02 3.67788794e-03 5.03579664e-03 1.13364414e-02]
     [4.85502123e-02 3.38573670e-02 6.08603360e-02 7.17186260e-05]]




Compare the results with the Sinkhorn algorithm
```````````````````````````````````````````````

Call the Sinkhorn algorithm from POT


.. code-block:: default


    sinkhorn_pi = ot.sinkhorn(a, b, M, reg)
    print(sinkhorn_pi)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[2.55553508e-02 9.96395661e-02 1.76579142e-02 4.31178193e-06]
     [1.21640234e-01 1.25357448e-02 1.30225079e-03 7.37891333e-03]
     [3.56123974e-03 7.61451746e-02 6.31505947e-02 1.33831455e-07]
     [2.61515201e-02 3.34246014e-02 8.28734709e-02 4.07550425e-04]
     [9.85500876e-03 7.52288523e-04 1.08262629e-02 1.21423583e-01]
     [2.16904255e-02 9.03825804e-04 1.87178504e-03 1.18391107e-01]
     [4.15462212e-02 2.65987989e-02 7.23177217e-02 2.39440105e-03]]




Plot Transportation Matrices
````````````````````````````

For SGD


.. code-block:: default


    pl.figure(4, figsize=(5, 5))
    ot.plot.plot1D_mat(a, b, sgd_dual_pi, 'dual : OT matrix SGD')
    pl.show()





.. image:: /auto_examples/images/sphx_glr_plot_stochastic_004.png
    :alt: dual : OT matrix SGD
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/project/examples/plot_stochastic.py:181: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
      pl.show()




For Sinkhorn


.. code-block:: default


    pl.figure(4, figsize=(5, 5))
    ot.plot.plot1D_mat(a, b, sinkhorn_pi, 'OT matrix Sinkhorn')
    pl.show()



.. image:: /auto_examples/images/sphx_glr_plot_stochastic_005.png
    :alt: OT matrix Sinkhorn
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/project/examples/plot_stochastic.py:189: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
      pl.show()





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  8.429 seconds)


.. _sphx_glr_download_auto_examples_plot_stochastic.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_stochastic.py <plot_stochastic.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_stochastic.ipynb <plot_stochastic.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
