.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_WDA.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_plot_WDA.py:


=================================
Wasserstein Discriminant Analysis
=================================

This example illustrate the use of WDA as proposed in [11].


[11] Flamary, R., Cuturi, M., Courty, N., & Rakotomamonjy, A. (2016).
Wasserstein Discriminant Analysis.


.. code-block:: default


    # Author: Remi Flamary <remi.flamary@unice.fr>
    #
    # License: MIT License

    import numpy as np
    import matplotlib.pylab as pl

    from ot.dr import wda, fda









Generate data
-------------


.. code-block:: default


    n = 1000  # nb samples in source and target datasets
    nz = 0.2

    # generate circle dataset
    t = np.random.rand(n) * 2 * np.pi
    ys = np.floor((np.arange(n) * 1.0 / n * 3)) + 1
    xs = np.concatenate(
        (np.cos(t).reshape((-1, 1)), np.sin(t).reshape((-1, 1))), 1)
    xs = xs * ys.reshape(-1, 1) + nz * np.random.randn(n, 2)

    t = np.random.rand(n) * 2 * np.pi
    yt = np.floor((np.arange(n) * 1.0 / n * 3)) + 1
    xt = np.concatenate(
        (np.cos(t).reshape((-1, 1)), np.sin(t).reshape((-1, 1))), 1)
    xt = xt * yt.reshape(-1, 1) + nz * np.random.randn(n, 2)

    nbnoise = 8

    xs = np.hstack((xs, np.random.randn(n, nbnoise)))
    xt = np.hstack((xt, np.random.randn(n, nbnoise)))








Plot data
---------


.. code-block:: default

    pl.figure(1, figsize=(6.4, 3.5))

    pl.subplot(1, 2, 1)
    pl.scatter(xt[:, 0], xt[:, 1], c=ys, marker='+', label='Source samples')
    pl.legend(loc=0)
    pl.title('Discriminant dimensions')

    pl.subplot(1, 2, 2)
    pl.scatter(xt[:, 2], xt[:, 3], c=ys, marker='+', label='Source samples')
    pl.legend(loc=0)
    pl.title('Other dimensions')
    pl.tight_layout()




.. image:: /auto_examples/images/sphx_glr_plot_WDA_001.png
    :class: sphx-glr-single-img





Compute Fisher Discriminant Analysis
------------------------------------


.. code-block:: default

    p = 2

    Pfda, projfda = fda(xs, ys, p)








Compute Wasserstein Discriminant Analysis
-----------------------------------------


.. code-block:: default

    p = 2
    reg = 1e0
    k = 10
    maxiter = 100

    Pwda, projwda = wda(xs, ys, p, reg, k, maxiter=maxiter)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Compiling cost function...
    Computing gradient of cost function...
     iter              cost val         grad. norm
        1   +6.9975655945175486e-01 5.83350533e-01
        2   +4.4716544057335428e-01 3.25015154e-02
        3   +4.4602529291975895e-01 5.27180899e-02
        4   +4.4379208695780570e-01 3.04999625e-02
        5   +4.4174754804571303e-01 5.53024300e-02
        6   +4.4073465032341014e-01 6.46295001e-02
        7   +4.3800362087498224e-01 2.80667871e-02
        8   +4.3727108925800418e-01 7.22335278e-02
        9   +4.3499397551447727e-01 4.14058621e-02
       10   +4.3410780237094970e-01 4.55765167e-02
       11   +4.3244481965999598e-01 2.63850381e-02
       12   +4.3200372301951268e-01 1.16566913e-01
       13   +4.3030206480653810e-01 1.08532397e-01
       14   +4.2445478798071001e-01 8.45834257e-02
       15   +4.0248359077470836e-01 1.76293621e-01
       16   +3.1972456029879331e-01 2.16341825e-01
       17   +2.9986018179371909e-01 2.52479673e-01
       18   +2.4212413414624789e-01 1.13360490e-01
       19   +2.3411545403580242e-01 5.48099000e-02
       20   +2.3363204073847385e-01 4.93431804e-02
       21   +2.3225593102756203e-01 2.08767654e-02
       22   +2.3196438384656093e-01 3.59293175e-03
       23   +2.3195597015499705e-01 3.00493200e-04
       24   +2.3195591131846435e-01 3.70320353e-05
       25   +2.3195591129305834e-01 3.72956247e-05
       26   +2.3195591119426825e-01 3.52155915e-05
       27   +2.3195591084715905e-01 2.66539795e-05
       28   +2.3195591049284089e-01 1.31944808e-05
       29   +2.3195591041551061e-01 7.43581910e-06
       30   +2.3195591037972743e-01 5.54424448e-07
    Terminated - min grad norm reached after 30 iterations, 5.14 seconds.





Plot 2D projections
-------------------


.. code-block:: default


    xsp = projfda(xs)
    xtp = projfda(xt)

    xspw = projwda(xs)
    xtpw = projwda(xt)

    pl.figure(2)

    pl.subplot(2, 2, 1)
    pl.scatter(xsp[:, 0], xsp[:, 1], c=ys, marker='+', label='Projected samples')
    pl.legend(loc=0)
    pl.title('Projected training samples FDA')

    pl.subplot(2, 2, 2)
    pl.scatter(xtp[:, 0], xtp[:, 1], c=ys, marker='+', label='Projected samples')
    pl.legend(loc=0)
    pl.title('Projected test samples FDA')

    pl.subplot(2, 2, 3)
    pl.scatter(xspw[:, 0], xspw[:, 1], c=ys, marker='+', label='Projected samples')
    pl.legend(loc=0)
    pl.title('Projected training samples WDA')

    pl.subplot(2, 2, 4)
    pl.scatter(xtpw[:, 0], xtpw[:, 1], c=ys, marker='+', label='Projected samples')
    pl.legend(loc=0)
    pl.title('Projected test samples WDA')
    pl.tight_layout()

    pl.show()



.. image:: /auto_examples/images/sphx_glr_plot_WDA_002.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/project/examples/plot_WDA.py:127: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
      pl.show()





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  5.630 seconds)


.. _sphx_glr_download_auto_examples_plot_WDA.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_WDA.py <plot_WDA.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_WDA.ipynb <plot_WDA.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
