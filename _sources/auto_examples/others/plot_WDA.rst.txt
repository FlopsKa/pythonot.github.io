.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_others_plot_WDA.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_others_plot_WDA.py:


=================================
Wasserstein Discriminant Analysis
=================================

This example illustrate the use of WDA as proposed in [11].


[11] Flamary, R., Cuturi, M., Courty, N., & Rakotomamonjy, A. (2016).
Wasserstein Discriminant Analysis.


.. code-block:: default


    # Author: Remi Flamary <remi.flamary@unice.fr>
    #
    # License: MIT License

    # sphinx_gallery_thumbnail_number = 2

    import numpy as np
    import matplotlib.pylab as pl

    from ot.dr import wda, fda









Generate data
-------------


.. code-block:: default


    n = 1000  # nb samples in source and target datasets
    nz = 0.2

    np.random.seed(1)

    # generate circle dataset
    t = np.random.rand(n) * 2 * np.pi
    ys = np.floor((np.arange(n) * 1.0 / n * 3)) + 1
    xs = np.concatenate(
        (np.cos(t).reshape((-1, 1)), np.sin(t).reshape((-1, 1))), 1)
    xs = xs * ys.reshape(-1, 1) + nz * np.random.randn(n, 2)

    t = np.random.rand(n) * 2 * np.pi
    yt = np.floor((np.arange(n) * 1.0 / n * 3)) + 1
    xt = np.concatenate(
        (np.cos(t).reshape((-1, 1)), np.sin(t).reshape((-1, 1))), 1)
    xt = xt * yt.reshape(-1, 1) + nz * np.random.randn(n, 2)

    nbnoise = 8

    xs = np.hstack((xs, np.random.randn(n, nbnoise)))
    xt = np.hstack((xt, np.random.randn(n, nbnoise)))








Plot data
---------


.. code-block:: default

    pl.figure(1, figsize=(6.4, 3.5))

    pl.subplot(1, 2, 1)
    pl.scatter(xt[:, 0], xt[:, 1], c=ys, marker='+', label='Source samples')
    pl.legend(loc=0)
    pl.title('Discriminant dimensions')

    pl.subplot(1, 2, 2)
    pl.scatter(xt[:, 2], xt[:, 3], c=ys, marker='+', label='Source samples')
    pl.legend(loc=0)
    pl.title('Other dimensions')
    pl.tight_layout()




.. image:: /auto_examples/others/images/sphx_glr_plot_WDA_001.png
    :alt: Discriminant dimensions, Other dimensions
    :class: sphx-glr-single-img





Compute Fisher Discriminant Analysis
------------------------------------


.. code-block:: default

    p = 2

    Pfda, projfda = fda(xs, ys, p)








Compute Wasserstein Discriminant Analysis
-----------------------------------------


.. code-block:: default

    p = 2
    reg = 1e0
    k = 10
    maxiter = 100

    P0 = np.random.randn(xs.shape[1], p)

    P0 /= np.sqrt(np.sum(P0**2, 0, keepdims=True))

    Pwda, projwda = wda(xs, ys, p, reg, k, maxiter=maxiter, P0=P0)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Compiling cost function...
    Computing gradient of cost function...
     iter              cost val         grad. norm
        1   +8.3042776946697494e-01 5.65147154e-01
        2   +4.4401037686381051e-01 2.16760501e-01
        3   +4.2234351238819939e-01 1.30555049e-01
        4   +4.2169879996364473e-01 1.39115407e-01
        5   +4.1924746118060618e-01 1.25387848e-01
        6   +4.1177409528990766e-01 6.70993539e-02
        7   +4.0862213476139059e-01 3.52716830e-02
        8   +4.0747229322240275e-01 3.34923131e-02
        9   +4.0678766065261668e-01 2.74029183e-02
       10   +4.0621337155459653e-01 2.03651803e-02
       11   +4.0577080390746939e-01 2.59605592e-02
       12   +4.0543140912472303e-01 3.28883715e-02
       13   +4.0470236926310615e-01 1.47528039e-02
       14   +4.0445628467485967e-01 5.03183254e-02
       15   +4.0364189455823168e-01 3.31006504e-02
       16   +4.0303977563860643e-01 1.39885352e-02
       17   +4.0301476238068779e-01 2.17467623e-02
       18   +4.0292344305551359e-01 1.79959903e-02
       19   +4.0271888324956723e-01 6.94408253e-03
       20   +4.0183214772752968e-01 1.98323111e-02
       21   +3.9762638476827311e-01 1.03196828e-01
       22   +3.8225638744638857e-01 1.36012418e-01
       23   +3.0855539688881650e-01 1.92702958e-01
       24   +2.8000945998903215e-01 2.01918931e-01
       25   +2.3687668466143014e-01 9.01904411e-02
       26   +2.3430735105520742e-01 7.23272127e-02
       27   +2.3120104424504515e-01 2.94334895e-02
       28   +2.3066170616879944e-01 9.19913732e-03
       29   +2.3060625079021682e-01 1.64415941e-03
       30   +2.3060590682025905e-01 1.48136200e-03
       31   +2.3060485078487741e-01 7.92645710e-04
       32   +2.3060445280796515e-01 1.95401620e-04
       33   +2.3060444949222994e-01 1.82391087e-04
       34   +2.3060443819115556e-01 1.28432495e-04
       35   +2.3060442707947221e-01 2.28062529e-06
       36   +2.3060442707702308e-01 1.25240534e-06
       37   +2.3060442707599507e-01 2.01758422e-07
    Terminated - min grad norm reached after 37 iterations, 7.15 seconds.





Plot 2D projections
-------------------


.. code-block:: default


    xsp = projfda(xs)
    xtp = projfda(xt)

    xspw = projwda(xs)
    xtpw = projwda(xt)

    pl.figure(2)

    pl.subplot(2, 2, 1)
    pl.scatter(xsp[:, 0], xsp[:, 1], c=ys, marker='+', label='Projected samples')
    pl.legend(loc=0)
    pl.title('Projected training samples FDA')

    pl.subplot(2, 2, 2)
    pl.scatter(xtp[:, 0], xtp[:, 1], c=ys, marker='+', label='Projected samples')
    pl.legend(loc=0)
    pl.title('Projected test samples FDA')

    pl.subplot(2, 2, 3)
    pl.scatter(xspw[:, 0], xspw[:, 1], c=ys, marker='+', label='Projected samples')
    pl.legend(loc=0)
    pl.title('Projected training samples WDA')

    pl.subplot(2, 2, 4)
    pl.scatter(xtpw[:, 0], xtpw[:, 1], c=ys, marker='+', label='Projected samples')
    pl.legend(loc=0)
    pl.title('Projected test samples WDA')
    pl.tight_layout()

    pl.show()



.. image:: /auto_examples/others/images/sphx_glr_plot_WDA_002.png
    :alt: Projected training samples FDA, Projected test samples FDA, Projected training samples WDA, Projected test samples WDA
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/project/examples/others/plot_WDA.py:135: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
      pl.show()





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  7.658 seconds)


.. _sphx_glr_download_auto_examples_others_plot_WDA.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_WDA.py <plot_WDA.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_WDA.ipynb <plot_WDA.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
