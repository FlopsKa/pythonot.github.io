.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_WDA.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_plot_WDA.py:


=================================
Wasserstein Discriminant Analysis
=================================

This example illustrate the use of WDA as proposed in [11].


[11] Flamary, R., Cuturi, M., Courty, N., & Rakotomamonjy, A. (2016).
Wasserstein Discriminant Analysis.


.. code-block:: default


    # Author: Remi Flamary <remi.flamary@unice.fr>
    #
    # License: MIT License

    import numpy as np
    import matplotlib.pylab as pl

    from ot.dr import wda, fda









Generate data
-------------


.. code-block:: default


    n = 1000  # nb samples in source and target datasets
    nz = 0.2

    # generate circle dataset
    t = np.random.rand(n) * 2 * np.pi
    ys = np.floor((np.arange(n) * 1.0 / n * 3)) + 1
    xs = np.concatenate(
        (np.cos(t).reshape((-1, 1)), np.sin(t).reshape((-1, 1))), 1)
    xs = xs * ys.reshape(-1, 1) + nz * np.random.randn(n, 2)

    t = np.random.rand(n) * 2 * np.pi
    yt = np.floor((np.arange(n) * 1.0 / n * 3)) + 1
    xt = np.concatenate(
        (np.cos(t).reshape((-1, 1)), np.sin(t).reshape((-1, 1))), 1)
    xt = xt * yt.reshape(-1, 1) + nz * np.random.randn(n, 2)

    nbnoise = 8

    xs = np.hstack((xs, np.random.randn(n, nbnoise)))
    xt = np.hstack((xt, np.random.randn(n, nbnoise)))








Plot data
---------


.. code-block:: default

    pl.figure(1, figsize=(6.4, 3.5))

    pl.subplot(1, 2, 1)
    pl.scatter(xt[:, 0], xt[:, 1], c=ys, marker='+', label='Source samples')
    pl.legend(loc=0)
    pl.title('Discriminant dimensions')

    pl.subplot(1, 2, 2)
    pl.scatter(xt[:, 2], xt[:, 3], c=ys, marker='+', label='Source samples')
    pl.legend(loc=0)
    pl.title('Other dimensions')
    pl.tight_layout()




.. image:: /auto_examples/images/sphx_glr_plot_WDA_001.png
    :class: sphx-glr-single-img





Compute Fisher Discriminant Analysis
------------------------------------


.. code-block:: default

    p = 2

    Pfda, projfda = fda(xs, ys, p)








Compute Wasserstein Discriminant Analysis
-----------------------------------------


.. code-block:: default

    p = 2
    reg = 1e0
    k = 10
    maxiter = 100

    Pwda, projwda = wda(xs, ys, p, reg, k, maxiter=maxiter)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Compiling cost function...
    Computing gradient of cost function...
     iter              cost val         grad. norm
        1   +8.3026637619080290e-01 5.93997873e-01
        2   +4.5099196392425617e-01 1.70284450e-01
        3   +4.3252747165072541e-01 5.91362842e-02
        4   +4.2934569170214365e-01 8.27896464e-02
        5   +4.2050171427434047e-01 1.05105115e-01
        6   +3.7397003856746175e-01 2.33688345e-01
        7   +2.4731329341505445e-01 1.46515287e-01
        8   +2.3124372010556027e-01 9.17229920e-02
        9   +2.2514214150679110e-01 2.61643072e-02
       10   +2.2483997155204263e-01 1.60628255e-02
       11   +2.2475458185450781e-01 1.15336139e-02
       12   +2.2473521260866777e-01 1.02535557e-02
       13   +2.2467879311522876e-01 4.68053945e-03
       14   +2.2467592471613054e-01 4.20537810e-03
       15   +2.2466719515797950e-01 2.19386107e-03
       16   +2.2466430351547789e-01 7.42126410e-04
       17   +2.2466425972974965e-01 6.97267011e-04
       18   +2.2466410789837904e-01 5.11655748e-04
       19   +2.2466402114414813e-01 3.65579570e-04
       20   +2.2466400716960544e-01 3.36161565e-04
       21   +2.2466396149312001e-01 2.13219863e-04
       22   +2.2466393799890122e-01 1.03572161e-04
       23   +2.2466393353177114e-01 6.41927188e-05
       24   +2.2466393176138219e-01 3.87562822e-05
       25   +2.2466393130791582e-01 2.88310951e-05
       26   +2.2466393095825746e-01 1.77170735e-05
       27   +2.2466393083535324e-01 1.14903897e-05
       28   +2.2466393075887856e-01 4.34140234e-06
       29   +2.2466393074934959e-01 2.17785092e-06
       30   +2.2466393074690660e-01 1.06123457e-06
       31   +2.2466393074642541e-01 6.43209104e-07
    Terminated - min grad norm reached after 31 iterations, 6.35 seconds.





Plot 2D projections
-------------------


.. code-block:: default


    xsp = projfda(xs)
    xtp = projfda(xt)

    xspw = projwda(xs)
    xtpw = projwda(xt)

    pl.figure(2)

    pl.subplot(2, 2, 1)
    pl.scatter(xsp[:, 0], xsp[:, 1], c=ys, marker='+', label='Projected samples')
    pl.legend(loc=0)
    pl.title('Projected training samples FDA')

    pl.subplot(2, 2, 2)
    pl.scatter(xtp[:, 0], xtp[:, 1], c=ys, marker='+', label='Projected samples')
    pl.legend(loc=0)
    pl.title('Projected test samples FDA')

    pl.subplot(2, 2, 3)
    pl.scatter(xspw[:, 0], xspw[:, 1], c=ys, marker='+', label='Projected samples')
    pl.legend(loc=0)
    pl.title('Projected training samples WDA')

    pl.subplot(2, 2, 4)
    pl.scatter(xtpw[:, 0], xtpw[:, 1], c=ys, marker='+', label='Projected samples')
    pl.legend(loc=0)
    pl.title('Projected test samples WDA')
    pl.tight_layout()

    pl.show()



.. image:: /auto_examples/images/sphx_glr_plot_WDA_002.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/project/examples/plot_WDA.py:127: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
      pl.show()





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  6.900 seconds)


.. _sphx_glr_download_auto_examples_plot_WDA.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_WDA.py <plot_WDA.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_WDA.ipynb <plot_WDA.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
